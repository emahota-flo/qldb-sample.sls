import { HttpBadRequestError, HttpInternalServerError } from '@errors/http';
import { ErrorStatusCode, HttpError } from '@errors/http/http-error';
import { InputValidationError } from '@errors/runtime';
import { RuntimeError } from '@errors/runtime/runtime-error';
import { log } from '@helper/logger';
import { format } from '@redtea/format-axios-error';
import { AxiosError } from 'axios';

export function errorHandler(caughtError: Error | HttpError | AxiosError | RuntimeError): undefined {
  log('caught error ', caughtError);

  let error = caughtError;
  if (!(error instanceof HttpError)) {
    /**
     * It means that error was unexpected and can have unpredictable structure
     * For example, Axios errors have different structure
     * Also, we can send all unexpected errors to Sentry here
     */
    log('This error was not generated by us. We should extract the statusCode, name and message here');
    error = formatUnknownError(error);
  }

  /**
   * Serverless supports following status codes:
   * 400  Bad Request
   * 401  Unauthorized
   * 403  Forbidden
   * 404  Not Found
   * 422  Unprocessable Entity
   * 500  Internal Server Error
   * 502  Bad Gateway
   * 504  Gateway Timeout
   */
  const supportedHttpError = formatUnsupportedError(<HttpError>error);

  /**
   * The error message looks like: [404] Not Found. User does not exist
   */
  throw `[${supportedHttpError.statusCode}] ${supportedHttpError.name}. ${supportedHttpError.message}`;
}

function formatUnknownError(error: Error | AxiosError | RuntimeError): HttpError {
  const axiosError = (<AxiosError>error).isAxiosError && format(<AxiosError>error);

  if (error instanceof InputValidationError) {
    return new HttpBadRequestError(error.message, { text: 'Instance InputValidationError' });
  }
  if (error instanceof RuntimeError) {
    return new HttpInternalServerError(error.message, { text: 'Instance RuntimeError' });
  }

  if (axiosError) {
    return new HttpError(
      axiosError.response?.status as ErrorStatusCode,
      axiosError.response?.statusText || 'Internal Server Error',
      axiosError.message
    );
  }

  return new HttpInternalServerError(error.message, { text: 'Unknown error' });
}

function formatUnsupportedError(error: HttpError): HttpError {
  if (error.statusCode === 409 || error.statusCode === 429) {
    return new HttpBadRequestError(error.message, { text: `Error with code ${error.statusCode} unsupported` });
  }
  if (error.statusCode === 503) {
    return new HttpInternalServerError(error.message, { text: `Error with code ${error.statusCode} unsupported` });
  }

  return error;
}
